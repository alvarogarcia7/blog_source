---
site:
- breadcrumbs
categories:
comments: true
date: 2016-09-25T11:02:50Z
title: Transcription of podcast: "Tech Leadership with Jeff Norris"
---

The role of a "Tech Lead" is a combination of software engineer, project manager and architect. A Tech Lead might spend 30% of their time coding and 70% of their time managing a project or resolving conflicts or doing planning. In today's episode, we discuss the structure of software teams and when it might make sense to have a tech lead on your team or if it might make sense for you to become a tech lead. And this might be in contrast with a more common team structure of project managers and engineers and engineering managers and, perhaps, qa [quality assurance]. Tech lead is an interesting role because it's more of a combination of several of these roles and I think it speaks to some changing nature of how we do software engineering.

Jeff Norris is an engineer from ThoughtWorks and he joins the show to discuss the idea behind tech leads. This is a great show for anybody interested in managing or who is looking for alternative team structures. I think this episode also appeals to engineers who transition to a role of more variety. If you're like me, I've been an engineer at several companies and I didn't like the idea of writing code all day and I wanted more human interaction so a tech lead would have been an interesting role. So I hope you enjoy this episode.

[1:21]

[2:52]

Jeff Meyerson: Jeff Norris is an engineer at ThoughtWorks, welcome to Software Engineering Daily!

Jeff Norris: Thank you! Welcome.

M: So today we're discussing the position of tech lead and when we talk about software engineering on this show, the roles that we typically discuss are project manager, engineering managers, architects, engineers, maybe qa. I have only started hearing about the role of tech lead more recently. Could you please explain what a tech lead is and how it differs from these other roles in the engineering team?

N: Yeah, so the tech lead is kinda the intersection of three different types of roles. So, first is a leadership: it's about being able to help the team do effective things, be good at things. It's also the intersection of development skills. Finally it's the architecture: it's understanding those three different areas and how they overlap.

M: Now, is it defining difference between a tech lead and these other roles that we've heard about (project manager, architect). Is a defining difference that the tech lead continues to write code?

[4:01]

N: Yes, so if you're not still developing, I don't think it's fair to call yourself a tech lead.

M: Why is that such an important fact?

N: The basic part of it is that -- the way I've heard it described -- the currency of the realm is how effective you are at getting things done and if you're no longer able to write the software that your team is responsible for, it's actually hard to have the respect from the team and be effective at doing it. You want to make decisions based on what's the best for the effectiveness of your system and if you can't actually do the things that your system needs, it's hard to actually know that you're making the right decisions. 

M: So I can agree with that, to a certain extent. Let's take it to a logical extreme that the CEO of the company, for example, Larry Page at Google or should I say Sundar Pichai



The role of tech lead is a combination of software engineer project manager and architect. A tech lead might spend 30 percent of her time coding and 70 percent of her time managing a project or resolving conflicts or doing planning. In today's episode we discuss at the structure of software teams and win it might make sense to have a tech lead on your team. Or it might make sense for you to become a tech lead. And this might be in contrast to a more common team structure of. Just project managers and engineers and engineering managers perhaps Q. a. Tech leaders in interesting role because it's more a combination of several of these roles and I think it speaks to some changing natures of how we do software engineering. Jeff Norris is an engineer from thought works and he joins the show to discuss the idea behind tech leads. This is a great show for anybody who's interested in management or who is looking for alternative team structures I think this episode also appeals to engineers who are looking to transition to a role with more variety if you're. If you're like me and I was an engineer at several companies and I didn't really like the idea of just writing code all day at one more human interaction so big tech lead would have been an interesting role I hope you enjoy this episode. Life is too short to have a job that you don't enjoy. If you don't like your job go to hire.com slash S. E. daily. Hired makes a finding a new job enjoyable and hired will connect you with the talent advocate that will walk you through the process of finding a better job it's like a personal concierge for finding a job maybe want more flexible hours or more money or remote work. Maybe you want to work at Facebook or uber or striper some of the other top companies that are desperately looking for engineers are hired. You deserve a job that you enjoy because you're someone who spends their spare time listening to a software engineering podcast. Clearly you're passionate about software so it's definite possible to find a job you enjoy. Check it out hired.com slash S. E. daily to get a special offer for software engineering daily listeners. A $1000 signing bonus from hired when you find that great job that gives you respect and salary that you deserve as a great engineer. I love hired because it puts more power in the hands of. Go to hired.com slash S. E. daily to get advantage of that special offer and thanks to hired for being a continued long time sponsor of software engineering daily. Jeff Norris is an engineer bought works Jeff welcome suffragette daily. Thank you welcome. So today we're discussing it the position of technically and when we talk about software engineering on the show the roles that we typically discuss our project managers engineering managers architects engineers maybe to a. I have only started to hear about the role of tech lead more recently. Could you start explaining what it tech lead is and how it differs from those other roles on engineering team. Yeah so at the tech leaders sort of the intersection between 3 different types of. Different types of roles on so first it's a it's a leadership are so it's about on being able to help the team do effective things be good things on it's also the intersection of the development skills on and finally it's the architecture and so it's understanding those 3 different areas and how the overlap. Now is is the defining difference between a tech lead and these other roles we've heard about like project manager architect. It's going to defining difference that the tech lead continues to write code. Yes I would is so if you're not if you're not still developing I don't think it's fair to call yourself a tech. I'm now why is that such an important fact. Well the the basics are the basic part of it is that I'm. Yeah well the way I heard it described is that current into the currency of the realm is how effective you are getting things done on and if you are no longer able to actually write the software that you're teams are responsible for on it's hard to actually have the respect of the team and be effective at doing it on. You wanna make decisions based on what's best for the effectiveness of your system and if you can't actually do the things that your system needs it's hard to actually know that you're making the right decisions. So I can agree with that maybe just to a certain extent but you know let's take it to the logical extreme the CEO of the company for example in L. like Larry page in Google or I guess it states in our perch I we wouldn't want soon DARPA tried to be writing code at our company because there will be a sign that he's not delegating well he's not leveraging his team well. So why is that not true at the extreme but is true at. Lower gradations of the company. Well so it depends on what your roles are on and each person has different areas where they are operating and if this CEO was still trying to write software. You must be a pretty small company on but the point is that they're not trying to operate in that sphere they're trusting other people to take care of it ought to wit as a tech lead role you are still part of that so you are still a part of the team that's actually delivering the side. And so as a result you want to still be able to do the art that you're responsible for. Me. So what if the tech lead were just can't hang out and do code reviews. You know I don't know maybe write tests every now and then is that enough how much code detected the aggregate tech lead picking features off the kanban board what exactly is going on there so it depends a lot on the size of the team in the strengths of the other people at in the organization on but a good rule of thumb is an effective tech lead is developing at least 30 percent of their time. And. Usually you don't want the tech lead to be critical path for anything important that's happening on the team you want to make sure that the rest of the team can be effective and that the tech leaders just knows all the things that are going on and can sort of get blockers out of the way but his goal is to make the team effective not necessarily be personally effective. He. So off the critical path so this is like may we detect leaders doing. Something that is non reliant and at that that does not like can't shut down the application if it doesn't get. Yeah I completed. I know how how do you what's the what's the job of an engineer on a team that is. That is not. Do you have a critical path could you explain that more detail well so the idea is that you want to make sure that the team is effective I mean there there's 2 ways of thinking about what you're trying to do either you're worried about how effective you are as an individual or you're worried about how effective your team is on and the and the role of the tech leaders to make sure that the overall team is effective on and sometimes that means that individually they'll be less effective than they would have otherwise I it's the idea of I could either sit down put my head down and just code or I could go to a meeting to help make sure that the team is headed in the right direction and that overall we are. Making the right decisions. So you have this role of software architect in the literature for awhile if you will which should ever seen a software architect and attack lead. Well soon a software architect is one and it's there's overlap essentially on a tech leaders responsible for understanding. Software architecture and being able to do effective software architecture but at the same time they're still expected to do development and focus on it technology leadership so it's kind of the tech clean has. Partial responsibilities of the software architect well but they're not they don't only do software architecture there also dealing with the details of the team. Well it's who we are you know. This text lead role at me I am cracking from wrong but it seems like it has not been around. For awhile deed it certainly talked about more recently because of some fundamental change and. How are teams work our technologies work or is it just an evolution in how we have been thinking about writing software that is sure of agnostic of. The technology that we have access to our what we know what's going on here why did this role crop up recently. So I'm not sure that the role itself is a new thing on it. Everything that we're doing seems like it's been around for awhile and we just figured out the right word to talk about it with any teams have been operating in this way for decades are but they don't always use the same terms for now we seem to be getting consistent about what we call this type of a role what do you call the person that's doing that intersection those and that intersectional. Yeah I guess I don't know I guess tech lead I'm so would I mean it. You really don't think there's any technological like that because like I I think about. Your individual employees have have so much more leverage these days because. Software that we're using to do our jobs has gotten much better you know there's all this visibility thanks to project management software we've got. In great collaborative version control software like get hub we've got continues deployment software we've got you know great ID ease all these things are are really making individual people just so much more powerful and it. You know I wasn't developing software 10 years ago. 6 years ago even it and so. So it's like a it maybe there's there's something there to the fact that. Since we have these tools that we can essentially delegate some work too perhaps. The role of a tech lead which is less well defined then. You know something like Q. a engineer or suffer engineer or you I design there you know up because we have these tools giving us additional leverage perhaps the flexibility of our. Of our jobs can. Can increase do you think that makes sense yeah no I think that's fair at the so I would describe it as the velocity of software development has changed right we figured out how to have a bigger impact with less amount of effort because we're doing things like continuous integration where we get feedback on the our changes immediately I it lets us as a team move faster and get our software ready for and deployed to production faster and on a more regular basis it's important that someone's making sure that the team is making good decisions and this role is. For me it whether you have someone specifically in the role or not this is something that needs to happen and so having someone happens to be in the particular role is making sure that this thing that's important happens. In. Indeed. So just give some historical context you've written some about your. Your past experience is and you know I think there is her Hey I enjoyed reading about them as ours preface any reaction because. It's always enjoyable for me to read about how software development has changed because I do think a lot about how these tools. I'm how things like. You know cloud computing for example or like the sixties immigration software or bad getup whatever have really changed the velocity and in contrast to this high velocity you've written about this large international leasing application that you worked on it sounds like in the early 2 thousands at you know I don't do we historical stuff enough on this show but what did the big contrast. And how we are doing software development today relative to. You know what you've written about 51015 years ago. The the sluggish pace the. You know that the amount of in person work that you had to do war where the big hallmarks of house offer development is changing. Yeah so a good contrast that describes a what's dramatically different now verse is a decade ago on a decade ago we're working on a large leasing application and it was a giant system billions of dollars worth of equipment were sold through this thing and. We deployed 23 sometimes 4 times a year and so there was a lot of ceremony around deployment we made very careful that absolutely everything was perfect there were 2 completely different teams doing testing there were 2 completely different teams doing performance analysis of the code bomb. And there was a lot of effort that went into making sure that it was right on this team was actually one of 2 projects that the farm cruise control product was created for way back in the day the first continuous integration server they basically said book we need to build the software on a regular basis we need to know that all of our changes are working we need to run our tests regularly and so this just we had the system built that like would run the tasks and so we can get continuous feedback on whether the changes. We're good or not whether this system was still doing all the things that it needed to and so we're doing this on a regular basis and we had a cadence of like all right let's get this thing completely ready for production. And then we would test it for awhile and the testing it for awhile literally could take about a month because we're doing a lot of work to make sure it was absolutely right and other people were checking to make sure that everything was perfect. Also there was a lot and a lot of effort that went into making sure that it was it was good on now we rebuild and redeploy on a daily basis sometimes even more frequent than that and we know that our changes are going to work because we write test to prove that they're going to work we on. We are constantly verifying that our system is affected it's performance it's doing all the things that it needs to. I can go back to my desk make a change. Commit. Have it run through our system and it is in production and customers are using it within a very short period of time and that was not the case on and the older systems. Now how long ago are we talking. Let's see so I started on that project in. Enter 9 years ago in that had already been running for a few years I know that system that the company that's for still prefers to behave in that manner and so I'm they still released 34 times a year and they're still a decent amount of ceremony around it odd now they don't have to know you don't have to all show up on site they've got it down to. You're on the script and the deployments finished I which is a lot better than it was before I got it. If they're still kind of operating in that manner on so they're still companies out there that are doing it. In the old way. Now are they doing it the old way. Like who is it well resend are they like you know who you really need to go slower be more deliberate because I mean I think this is actually it's kind of counter intuitive where is that you know you have a continues. Deployment staying in place. Yeah you start you start moving faster. It to my wife actually it is that you often say for before those types of organizations because inevitably something will go wrong and because the cadence of the the product development it's much faster it's easier to fix things. Show arena are yours are these products. That do not have a faster development cycle in place. Is it really by choice or like by well reasoned choice there's a more out of like conservatism. Well going slow doesn't make your failures any less painful arm and in fact you can make it a lot worse. If it takes you. 2:00 hours or a day to put a new version of your software into production and you needn't outage of your system in order to do that on if you figure out that something catastrophic happened. And it takes you a day to recover that's pretty devastating to your business so being slow about it is not going to save you especially if you don't notice that there's a problem until the users are actually using it in production. So you have people try and find all the problems before they get to production but that doesn't always work sometimes something slips through. On any I deal with going to a more if you're doing good continuous delivery where the idea is you're constantly trying to. Have things ready and available and tested and able to move to production regularly it's not about just cram things out as quickly as possible it is about. Figuring out how to. New things at at a meter pace and know that everything is working every step of the way. Indeed. So given that we're talking about tech leads and were talking about the. Ancestral process over software engineering what was different about team structure back then the cute you mentioned yeah from multiple. Teams that are dedicated to quality assurance and I guess maybe that's uncommon these days for 10 years ago I feel like it was not uncommon to have these teams like USA today is yeah I think I think Microsoft is totally gotten rid of their queue a process. Which would be totally unexpected 15 years ago they have all their engineers now doing Q. a because you can just write your tests for the software that you they're writing so you know I guess easing back to the conversation of tech leads. What was different about. Teams back in the day. Well it depends a little bit on size arm so this team that I that I was talking about that leasing application it started with there were about 80 people on the team when it started this was a huge project on. And the team that I'm on right now is how very much not the 2 pizza team no ideology all. I mean it was split up into sub teams but still the point is that. That that's not the way most teams are structured now most teams are smaller more nimble teams the idea is that they should be able to have an area of responsibility that they completely understand and can be affected then and they understand where the edges are and they can figure out how to make effective changes to their systems as a result of. Okay so getting back to the tech lead discussion. So examine tech lead at a modern software company. What's my interaction with upper management. I mean we've talked about Sir how I'm interacting with. Software engineers at my level maybe I'm kind of a combination of the manager slash empathize or slash architect slash doing some engineering. But what is my interface with the upper management. Well I mean your goal as a tech leaders to try and make sure that your team is effective and part of that is making sure that you understand. What the expectations of your team are and part of it is making sure that the rest of the organization understands what your team is doing and. So it's inbound and outbound communication and basically you and make sure that your team is. That in that it's well understood what you're doing and what you do it. It's. Well friend is an automated investing service that saves you time. As an engineer at your time is valuable. If you want to invest but you don't want to spend significant time evaluating your portfolio in allocating assets. Take a look at wealth front. Good a wealth friend.com slash S. E. daily to open an account today and get a special offer for software engineering daily listeners. $15000 manage for free when you open your account. With traditional investment services there are many humans in the loop that are doing things that wealth front automates away. When you pay the commissions and account fees of these traditional investment services. You're paying for work that could be done by a computer. So don't pay commissions and account fees. Maximize your gains with wealth fronts set it and forget it investment automation. Check out wealth friend.com slash S. E. daily it would support software engineering daily and it would introduce you to the world of automated investing. Well Fred.com slash S. E. daily thanks to wealth front for being a continued sponsor of the show now let's get on with the show. So what the. I'm way. Roll. So multi faceted. There was this yeah I'm. This episode of software engineering radio recently about. Developer anarchy which you may or may not have heard of sky this idea that engineers you know there there's this experiment that this guy Fred George did where basically said okay we're not gonna have any engineering managers. Where basically you have super flat company structure with the engineers are gonna do everything engineers are gonna take over. Management they can take over business they can take over product development did know some elements of design and things actually worked really really well so. To take this. Discussion to a different dimension I mean why should everybody be tech week why would you just have everybody on the team chi doing a little bit of everything. Well. Alright so us read George is a thought works alumni on so he will be back when I started I thought works you he was here umps that's kinda cool the history of it on. It's not about the. The role that an individual's playing it's about making sure that things happen. Had if everything magically happens on its own you don't necessarily need to have and individual responsible for things the problem is that. People are usually able to hook up focus on everything all at once and so the reason that you consolidate rolls into an individual bomb. Is to make sure that happens not that they should have a monopoly on are doing those types of activities so for example one of things that attack lead needs to be able to be effective at is influence they need to be able to help make sure that the team is good making good decisions arm and that that the just the things that the team is working on all the right things that doesn't mean that the only people that ever have to pay attention to influence they just also need to be good at it. Yeah you know I can also imagine. There are people for whom this role would really appeal to like I can yeah I I just reading about this rule chi chi studying at. I've read some of the writings that. People like yourself and Pat qua have done around this area it sounds like a pretty appealing role to. To me like I worked as a software engineer at several places before I started this podcast and I didn't really enjoy. Coding all day I love looking at code I love talking about code I I don't think I would want to be it inch total engineering manager I would love to spend some time in the code. But I do like getting my hands. Dirty and and all these different areas and. But in fact most of the engineers I've met who are extremely successful. Maybe they tend to be a little more Mahnomen nightly focused on the coat the performance of the code what's going on with that with their responsibility and there they were always better at that that that extreme focus. Than I was at at at at those particular companies that I worked at so should perhaps there is room for for both avenues you know there's room for the model but I cly focused engineer who really wants to focus on performance and their technical engineering aspects and there's also room for these people who want to have their fingers in a variety of pies. Yeah that definitely on this is not something that all engineers necessarily want to do on if you love to keep your head down and coding. You should do that and your tech lead job is to make sure that you can be effective at doing that that roadblocks get out of your way and you can get stuff done. Okay so talking about more about what tech Lee does in practice sure let's take. The example of a meeting right plenty of meetings at a software engineer company. You sit down at a meeting in a room with 6 or 7 people are 5 or 6 people however bigger TVS so why ports on the wall maybe there's a combine board it is a screen somewhere what is the tech lead doing and how do you know who is Lee it what is the tech we doing what's the engineering manager doing in this type of team structure and what it where their interactions with the software engineer. Well so it depends a lot on what the type of problem you're trying to solve is it depends on how you're trying to fix things on. As a tech clean I don't consider my responsibility to tell the team what to do my I consider my responsibility to make sure that the team is able to make the best decisions possible. And so sometimes that means contributing my knowledge to help make sure that we've got the right solution for particular problem and sometimes it means just sitting back asking some interesting probing questions and leading the team figure out what the right solution is on and I think it's important that I know what situation I'm in at the time on and whether it's more important for me to step forward and pick up the white board marker worth it's more important for me to sit back and. Watch a team. Do a great job. So. Generally at initial fringing team the manager is responsible for. Defusing problems for empathizing with people former smashing conflicts before they get out of control. My sense is that a tech lead has some of this responsibility. Yeah at a team that uses that has tech lead. I'm maybe could talk some about that like the conflict resolution process or the empathizing process in. What techniques will show you in contrast to a manager when it comes to this. Sure bomb so. I think it's completely fair that tech leads tell the team what to do but I also think that it is something that you should reserve for situations where it really matters and so you should figure out whether it's one of those situations on and essentially every time you tell the team you need to do something a certain way you using up some of your political capital you are on. Telling them to do something that they don't necessarily want to do if you can lead them in the right direction and that they can make a decision on their own that's a much better. Situation to be in for the team are because you want the team to be self sustaining you want them to be able to make the right decision. What do you happen to be sitting in the room or what pairing with them or what involved at all you wanna make sure that they know how to make the right decisions on their own and so the more th decisions that you make the less they figure out how to do on their own eyes so my general rule of thumb on this is if the team solution is good enough. Even if it's not what I would do in the situation I should probably step back and let them do it because they're probably making a good decision and. Anything that's not exactly what I want they're probably going to go through and figure out on what the best solution is an inmate completely not be what I think that where there think they should go it may actually be something. Better than I what what I was think. He. Well how much time should you tech lead spend writing code. I think a good rule of thumb is about a 30 percent air time. And that's because if you're spending much less than that it's too easy to get separated from what your system's actually doing all you want to know. They hate it history of higher system got to the way the way here where it is you want to know what are the important things that are happening now you want to know how to support and how to make sure that the system is running effectively on. The more you get removed from the actual building of your systems are the harder it is to actually understand what the system is doing. So can you give a little bit of your tech lead experience and practice maybe what you are what you have done is a tech lead most recently and so. Sort of how you implemented the rules of thumb that we're talking about. Sure gone so I can talk about my team right now and on the snap CI team at that works and don't see this week since we had a holiday this week and just came back it's kind a short week. One of my teammates who was on assigned as the al level 3 support developer I went home sick and so this week I'm doing the level 3 support us so I'm the one hope tearing the pager and responding to problems that our support team has with this with the suffer the working on and so on I'm sort of feeling and what and what needs to get done. At the same time I'm also spending some time checking with the team making sure that their goals are being met and that they're sort of doing things that are effective for them for development ended their career goals are kind of in line on. It also paying attention to some larger architectural things that our team is going through and so it's a little bit of support a little bit of people development and a little bit of long term development and evolution of our system. Okay. And I'm so. I've never worked in a company that has a tech lead role. So if there's someone out there listening who wants to get management by N. for the idea of this tech lead role within a company. How can you go about doing that what should you say to your manager like if you're an engineer. Can you can you say Hey I want to be the first tech clear this company or what kind of advice do you have. Yeah so. I think most of these roles are something you start by kind of doing the behaviors. And then explain why it's important to foot more formalized something so I think basically you essentially make sure that the team is effective and spend your time. Helping the team do the things it needs to and then you can kind of crystallize what were the things that were most effective in what do you need a little bit more of to make the team overall more effective. But the goal of this is not. Your and this is where you year your goal switch from ma as an individual I want to be effective to as a team we need to be effective and so you start looking at things from the perspective of. What do we need to do as a team to be able to be more effective on and notice the holes that are that are there so you can help fill those holes. So I can I would like to talk about thought works a little more broadly because this is where you're employed and you've been there for awhile and one thing I find interesting about thought works is that it contrasts with some other companies that do a lot of consulting. It seemed to have a better retention rate for strong engineers people that join thought works. Tend to stay for a longer time in contrast to other consulting places I've seen have a faster revolving door. What has kept you at thought works for awhile. Not so for me the big thing that keeps me at that works is I love the people I feel like I am always learning I'm always growing I get to work with some amazing people and. I love that that keeps me coming back. User semi about like the. Okay get this is kind of like an academic environment that don't work for this very very. I had an absolutely get you I mean you read blog posts all the time about Dick some blog post gets goes trending on hacker news it's like some post on you know on a thought works blaugrana Martin Fowler blog when Ballard does I think is one of the founders of thought works or which started me who was there early on and you get the sense that there is like kind of a thought leadership or really a philosophical. Pieces setting at thought work she's it's accurate. Yeah I think it's actually a little inverted from where. What most other organizations with think about it's not that I'm luminaries like like Martin Fowler are telling everyone else what to think arm Martin's actually amazing at listening to what other teams are doing on and synthesizing that and presenting it to to the rest of the world as this is what I've learned in this is a good way to think about things off thought workers in general are pretty good at listening to what their peers are doing the th the concrete things that are happening on our projects on and being able to share that with the rest of the world on that so it's a combination of being really good at articulating interesting things and working on projects that make a difference sides doing projects that. Are critical is successful businesses and it's valuable to their organizations on and usually technically complicated and so the combination of this is really important and my business cares a lot about about it with this is really hard to fix. You end up coming up with really interesting solutions and those interesting solutions are interesting to write about. And why it is that. Mesh well with a consulting organization because. You know you have Arabs it it's interesting because like I think of the many consulting places as this kind of revolving door the organization doesn't really stand for anything other than it just does. Projects like a mercenary but that's really not the sense I get without works I you know I did a show awhile ago about soundcloud soundcloud micro services. Architect there move towards was the back ends for front ends. Pattern and it and it if for this process they brought in thought works in this is. Soundcloud soundcloud has a robust. Engineering organization but they did. I think the contractor thought works or maybe the Emmy they brought in just their friends with people without workers but. You wouldn't get that with most jobs you most consultancies so. I know it would do what how distorted differ as a consulting organization from other consultancies. Yeah so this is actually something that we learned from Ben and Jerry's on what so chip at it typical consulting company big primary as creatively yet so they have this 3 pillars model for their organization and so we are a typical consulting company is interested in primarily running a sustainable business. And we are interested in that but that's only one of 3 pillars for us and the other 2 pillars are. Revolutionizing the IT industry and. Advancing social and economic justice. And so we do care about running us sustainable business but we're also trying to figure out how to move the industry forward and so that's around making sure that we're that as an industry were making good sustainable technology decisions that we are on backing the right course in terms of picking good technologies. For the long run and doing interesting things on and then finally also that we're we're making this the world we want to live and that we are on advancing people's rights and making sure that that the world it becomes more just and through our actions. And so I think that's a dramatic difference from a more traditional consulting company we care about our industry and it's not just about us it's about pot making sure that the world's better for the people that are graduating from college in may have nothing to do with our ex ever in their life we want them to have an industry that we're proud of and we'd like to move closer to that. Indeed. So how does that you know for some reason listening who has never done consulting. Yeah I think this this difference between consulting and. Work full time on a product at a company that you are actually employed by there are some stark differences are consulting is not for everyone working full time for companies are for everyone and there are these varieties gradations of how you can do software engineering. I I you know just thinking of career development like how should people. Or what would be you know how if your if your son's working full time or maybe your work as a consultant. How should you how do those 2 areas of work differ then and like for those who have not tried out consulting what what makes appealing to you because this is something that I've not covered on the show at all and yet I'm sure there are plenty of consultants listening and put sure there are plenty people listening who are considering going from full time engineering to consulting. So I'm there's a third category that I'd add to that list which is I. contract. Well and so some some consulting there's a bit of a blur between consulting work and contract work. On a contract work tends to be there is a role you fill it for a particular amount of time and you go off on our version of what consulting looks like is a lot more centered around projects and on figuring out how to solve an interesting complicated problem for a client on in those tend to be our. Although we have some very long term engagements were working with companies for long periods of time we also have short term things where we go into an organization for 3 months help them figure out how to get through a particularly complicated problem how to get a website up how to be able to capture new market on how to fix some sort of internal problem that they're dealing with. It tends to be very intense aren't we need to figure out what exactly we need to do as an organization or as a team to fix the problem we need to understand the problem we need to make sure that their organizations are heading in the right direction. And then we have to figure out how to deliver on that and so it's a very quick turnaround from identifying the problem in figuring out that direction and then getting down to business and actually solving the problem improving that we're making the right decisions along the way by doing a number of experiments where we try something make sure it works on then product ties and get it out to actual users who are who are using the system and do going through that cycle over and over again on. You go through all the typical phases of a project multiple times and you do that at multiple clients one after another and it's a slightly different problem it's a slightly different organization and so you get that axis that practice of going through something multiple times as opposed to where you're at a if you're at an organization and work on a single team for a number of years you get that one experience on a single time of the life cycle of that team we tend to get that site that life cycle experience more frequently and so. You get better at it by doing it multiple times it's similar to exercise where the more times you try something the better you get at doing it him. And the. So I think they are just kind of. In this. Unique category where it's. It doesn't there's consulting but. Powers also builds software. It's kind of like the I think pivotal has a somewhat of a similar model. An 8 foot this hasn't been around for very long this this. Type of company where. The company build software that also does. Does consulting. What's it like what's the company structure that. That encourages that how do people move between. Different roles at the company where there is some consulting there some product development. And how what is the feedback loop between. The product development side of the house and the consultancy side of the house who are maybe using the product who maybe good customers of the product to maybe good sources of feedback. How is that structured. Yeah so I at I spent my first decade I thought works working in our professional services side well aware as a consultant and I've spent the last year 0.5 working in our. In our studio side which is the software development where we see produced commercial software also got experience on both sides and both sides of the organization. As the software side of the does side where we're building stop at a studio side Bob what we're doing is building tools that I'm. We're proud to use things that help make software development more effective and so it's about doing things Steve that make our industry work a little bit better and solving problems that we think are pretty universal things like art how do I effectively buildings house my software how do we get into production I we also will mingle product which is I'm hot truck about track planning and tracking your software development it's about add on figuring out how to run your team's effectively and helping the teams on get rid of friction that help that stops teams are being able to be effective. For us it's about tools that make software development batter on all the things that were involved in are pretty much one directly involved in software development. Alright. Well I think that's a great way to close off Jeff it we will talk about tech leads. We've talked about consulting and thought works. As any else you'd like to add about maybe resource is where people can find out about tech leadership or anything similar. Yeah so I'm if you're just learning about tech leadership I recommend you get on. Pat because book on that's I take you away and it's I believe it's talking with tech leads I can check we can check the name but on there yeah pack quite as on a number of great resources on. Talking about tech leadership Peter just getting getting use to an understanding what about the topic. Great well Jeff Norris thanks for coming I suffragette daily it's been a pleasure talking to you. Alright great it's great talking with you. Thanks to symphonic for sponsoring software engineering daily. Symphonic was a custom engineered shop where senior engineers tackle big tech challenges while learning from each other. Check it out at symphonic.com slash S. E. daily that's S. Y. M. P. H. O. N. O..com slash S. E. daily thanks again some fun. 