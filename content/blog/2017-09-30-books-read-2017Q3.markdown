---
categories:
- book
- reading
- 2017
- Q3
- self-study
- codurance
comments: true
date: 2017-06-30T21:00:00Z
published: false
title: Books read in 2017Q3
url: /blog/2017/09/30/books-read-2017q3/
---

[deaprendices]: https://twitter.com/@deaprendices
[codurance]: https://twitter.com/@codurance

Read this quarter:

  * the senior software developer; Copeland, with the [aprendices reading club][deaprendices]
  * Russell en 90 minutos, Strathern; non-technical. A quick introduction to Bertrand Russell, his life and his way of thinking and seeing the world.
  * Homenaje a Cataluña, Orwell; non-technical. A first-person view of the events during the Spanish Civil War (1936-1939), seen from the perspective of a British citizen that went there voluntarily. Explains the internal fracture of the left political parties and the fracture of the Spanish society.

<!-- copy-paste the books.md here -->

backlog (partially sorted):

  * unsorted V
  * The Machine That Changed the World: The Story of Lean Production
  * Haskell Programming
  * Software Architecture in Practice
  * lucha por la desigualdad, la; Pontón; non-technical
  * psicología del dinero, la; Hammond; non-technical
  * Invirtiendo a largo plazo; García Paramés; non-technical
  * Well-Grounded Java Developer, the; own-it
  * Quién domina el mundo; Chomsky; non-technical
  * Learn You a Haskell for Great Good!; own-it
  * camino al 18J, el; Payne; non-technical
  * Cartas desde la revolución bolchevique; Sadoul; non-technical
  * Java Performance: The Definitive Guide
  * Why programmers work at night
  * Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical
  * Scrum and XP from the trenches, 2nd edition;
  * Els jueus i Catalunya; Villatoro; non-technical
  * El problema de los tres cuerpos; Liu; non-technical
  * Amazon Web Services in Action; own-it
  * Clojure Programming - Practical Lisp for the Java World
  * Mature optimization
  * XUnit Test Patterns
  * Let Over Lambda
  * The Haskell Road to Logic, Math and Programming
  * Types and Programming Languages
  * Fundamentals of Object-oriented Design in UML
  * Clojure for the brave and true
  * How to Solve It: A New Aspect of Mathematical Method
  * Conceptual Mathematics: A First Introduction to Categories
  * Understanding Computation: From Simple Machines to Impossible Programs
  * Programming in Haskell
  * Programming Languages: Application and Interpretation
  * Doing Math with Python
  * Perfect Software: And Other Illusions about Testing
  * Computability and Complexity - From a Programming Perspective
  * Thinking Forth: a language and philosophy for solving problems
  * Concepts, Techniques, and Models of Computer Programming
  * Bridging the Communication Gap; Adzic
  * Specification by Example; Adzic
  * Cucumber book, the; Adzic
  * Software Architecture for Developers; Brown
  * Object Design: Roles, Responsibilities, and Collaborations
  * RESTful Web APIs
  * RESTful Web Services Cookbook
  * Building Maintainable Software
  * Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)
  * A Pattern Language; Alexander
  * Types and Programming Languages, TAPL; Pierce; own-it
  * Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan
  * Cómo crear mapas mentales (Crecimiento personal); Buzan
  * First things first; Covey
  * What's best next; Perman
  * problems of philosophy, the; Russell
  * Requiem for the American dream; Chomsky
  * sun also rises, the; Hemingway
  * travels, the; Polo
  * Homo Deus: A Brief History of Tomorrow; Harari
  * Books by Aristotle
  * Books by Plato
  * Books by Descartes
  * The idea of culture; Eagleton

unfinished (unsorted):

  * Release It! - Design and Deploy Production-Ready Software; own-it
  * The Leprechauns of Software Engineering; Bossavit (*); own-it
  * Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (*); own-it
  * Pragmatic Thinking and Learning: Refactor Your Wetware; own-it
  * Functional Programming Patterns in Scala and Clojure; own-it
  * Readings in Database Systems, 5th Edition; own-it
  * La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical, own-it
  * Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it

next (2):

  * Refactoring (*); Fowler; own-it
  * Working Effectively with Legacy Code (*); Feathers; own-it

wip (3):

  * Aprendo Yoga; Van Lysebeth; non-technical
  * Getting things done, ...; Allen (*)
  * Nature of Software Development, the; Jeffries

done:

  * Russell en 90 minutos, Strathern; non-technical
  * Homenaje a Cataluña, Orwell; non-technical
  * Senior software developer, the; Copeland

